class {
  onCreate() {
    this.state = {
      width: 512,
      height: 512,
      layers: [],
      selectedUUID: null,
    }
    // TODO: Create offscreen canvas and render canvas.
  }
  onRender() {
    this.render()
  }
  addLayer(type) {
    let target = this.findUUID(this.state.selectedUUID)
    console.log(target)
    if (!target || !target.layers) {
      target = this.state
    }
    switch(type) {
      case 'image':
        target.layers.push(this.createImageLayer())
      break;
      case 'circle':
        target.layers.push(this.createCircleLayer())
      break;
      case 'fill':
        target.layers.push(this.createFillLayer())
      break;
      case 'group':
        target.layers.push(this.createGroupLayer())
      break;
    }
    this.forceUpdate()
  }
  focusLayer(uuid) {
    this.state.selectedUUID = uuid
  }
  setProperty(target, property, value) {
    if (target[property] === undefined) return
    if (value.target) value = value.target.value
    target[property] = value
    this.forceUpdate()
  }
  loadImageFile(layer, e) {
    if (!e.target.files || !e.target.files[0]) return
    let reader = new FileReader()

    reader.addEventListener('load', e => {
      layer.imageDataURL = e.target.result
      layer.image.src = layer.imageDataURL
    })

    reader.readAsDataURL(e.target.files[0])
  }
  findUUID(uuid, target=this.state) {
    let targetIndex = 0
    for (let i = 0; i < target.layers.length; i++) {
      if (target.layers[i].uuid === uuid) return target.layers[i]
      if (target.layers[i].layers) {
        let check = this.findUUID(uuid, target.layers[i])
        if (check) return check
      }
    }
    return null
  }
  createGroupLayer() {
    let group = {
      type: 'group',
      uuid: this.UUID(),
      layers: [],
      operation: 'source-over'
    }
    return group
  }
  createImageLayer() {
    let image = {
      type: 'image',
      uuid: this.UUID(),
      operation: 'source-over',
      imageURL: '',
      imageDataURL: '',
      image: new Image(),
    }
    image.image.addEventListener('load', () => {
      this.forceUpdate()
    })
    return image
  }
  createCircleLayer() {
    let circle = {
      type: 'circle',
      uuid: this.UUID(),
      radius: 256,
      color: '#000000',
      operation: 'source-over'
    }
    return circle
  }
  createFillLayer() {
    let fill = {
      type: 'fill',
      uuid: this.UUID(),
      startColor: '#000000',
      startAlpha: 1.0,
      endColor: '#000000',
      endAlpha: 1.0,
      angle: 0,
      operation: 'source-over',
    }
    return fill
  }
  UUID() {
    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
    )
  }
  render() {
    if (!this.getEl('DisplayCanvas')) return
    // Resize as needed.
    let c = this.getEl('DisplayCanvas')
    c.width = c.offsetWidth, c.height = c.offsetHeight

    let ctx = this.getEl('DisplayCanvas').getContext('2d')
    let octx = this.getEl('OffscreenCanvas').getContext('2d')
    let rctx = this.getEl('RenderCanvas').getContext('2d')

    octx.clearRect(0, 0, this.state.width, this.state.height)
    for (let i = 0; i < this.state.layers.length; i++) {
      this.renderLayer(octx, this.state.layers[i])
    }
    ctx.drawImage(this.getEl('OffscreenCanvas'), 0, 0, this.state.width, this.state.height)
  }
  renderLayer(ctx, layer) {
    ctx.save()
    switch(layer.type) {
      case 'group':
        // TODO: probably make new offscreen canvas and use that(?)
        for (let i = 0; i < layer.layers.length; i++) {
          this.renderLayer(ctx, layer.layers[i])
        }
        break;
      case 'image':
        this.renderImageLayer(ctx, layer)
        break;
      case 'circle':
        this.renderCircleLayer(ctx, layer)
        break;
      case 'fill':
        this.renderFillLayer(ctx, layer)
        break;
    }
    ctx.restore()
  }
  renderImageLayer(ctx, layer) {
    if (!layer.imageDataURL) return

    ctx.globalCompositeOperation = layer.operation

    ctx.drawImage(layer.image, 0, 0)
  }
  renderCircleLayer(ctx, layer) {
    ctx.globalCompositeOperation = layer.operation
    ctx.translate(layer.radius, layer.radius)
    ctx.fillStyle = layer.color

    ctx.beginPath()
    ctx.arc(0, 0, layer.radius, 0, 2 * Math.PI)
    ctx.fill()
  }
  renderFillLayer(ctx, layer) {
    ctx.globalCompositeOperation = layer.operation
    let gradient = ctx.createLinearGradient(0, 0, 0, this.state.height)
    gradient.addColorStop(0, layer.startColor)
    gradient.addColorStop(1, layer.endColor)

    ctx.fillStyle = gradient
    ctx.fillRect(0, 0, this.state.width, this.state.height)
  }
}

style {
  .AppTokenr {
    width: 100%;
    height: 100%;
    overflow: auto;
    border: 1px solid blue;
    display: grid;
    font-size: 1em;
    grid-template-areas: "App__Menu App__Menu"
                         "AppTokenr__Controls AppTokenr__View";
    grid-template-rows: auto minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr) minmax(0, 4fr);
  }
  .App__Menu {
    grid-area: App__Menu;
    display: flex;
    flex-wrap: nowrap;
    padding: 0.1em;
  }
  .App__Menu__Item {
    margin: 0.1em;
    padding: 0.1em;
  }
  .AppTokenr__Controls {
    grid-area: AppTokenr__Controls;
    display: grid;
    grid-template-rows: minmax(0, auto) minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
  }
  .AppTokenr__Controls__Layers {
    overflow: auto;
  }
  .AppTokenr__Controls__Layers__Layer.-selected {
    border: 3px solid yellow;
  }
  .AppTokenr__Controls__Layers__Layer {
    display: grid;
    grid-template-rows: minmax(0, 1fr) minmax(0, 1fr) minmax(0, auto);
    grid-template-columns: minmax(0, 1fr);
  }
  .AppTokenr__View {
    position: relative;
    grid-area: AppTokenr__View;
  }
  .AppTokenr__View__Canvas {
    width: 100%;
    height: 100%;
  }
  .AppTokenr__View__Background {
    position: absolute;
    width: 100%;
    height: 100%;
    background: black;
  }
  .-hidden {
    display: none;
  }
}

macro|{ layer }| name='AppTokenrControlsLayersLayer'
  div.AppTokenr__Controls__Layers__Layer on-click('focusLayer', layer.uuid) class={'-selected': state.selectedUUID === layer.uuid}
    div.AppTokenr__Controls__Layers__Layer__Name -- ${layer.type}
    div.AppTokenr__Controls__Layers__Layer__Configuration
    if(layer.type === 'circle')
      label
        span -- radius
        input type='number' value=layer.radius on-change('setProperty', layer, 'radius')
      label
        span -- color
        input type='color' value=layer.color on-change('setProperty', layer, 'color')
    else-if(layer.type === 'fill')
      label
        span -- start color
        input type='color' value=layer.startColor on-change('setProperty', layer, 'startColor')
      label
        span -- end color
        input type='color' value=layer.endColor on-change('setProperty', layer, 'endColor')
    else-if(layer.type === 'image')
      label
        span -- image
        input type='file' value=layer.imageURL on-change('loadImageFile', layer)
    label
      span -- clip
      input value=layer.operation list='clip-mode' on-change('setProperty', layer, 'operation')
    if(layer.layers)
      div.AppTokenr__Controls__Layers__Layer__Layers
        for|childLayer| of=layer.layers
          AppTokenrControlsLayersLayer layer=childLayer
div.AppTokenr
  div.App__Menu
    div.App__Menu__Item -- import
    div.App__Menu__Item -- export
  div.AppTokenr__Controls
    div.AppTokenr__Controls__Buttons
      div.AppTokenr__Controls__Buttons__Button on-click('addLayer', 'image') -- img
      div.AppTokenr__Controls__Buttons__Button on-click('addLayer', 'circle') -- circle
      div.AppTokenr__Controls__Buttons__Button on-click('addLayer', 'fill') -- fill
      div.AppTokenr__Controls__Buttons__Button on-click('addLayer', 'group') -- group
    div.AppTokenr__Controls__Layers
      datalist id='clip-mode'
        option value='source-in'
        option value='source-over'
      for|layer| of=state.layers
        AppTokenrControlsLayersLayer layer=layer
  div.AppTokenr__View
    canvas.AppTokenr__View__Canvas key='DisplayCanvas'
    canvas.AppTokenr__View__Canvas.-hidden style={width: state.width, height: state.height} width=state.width height=state.height key='RenderCanvas'
    canvas.AppTokenr__View__Canvas.-hidden style={width: state.width, height: state.height} width=state.width height=state.height key='OffscreenCanvas'
    canvas.AppTokenr__View__Background